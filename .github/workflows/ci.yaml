on: [push, pull_request]
name: ci
jobs:
  mlton-and-smlfmt:
    name: Build and test with MLton
    runs-on: ubuntu-20.04 # 22.04 doesn't contain mlton
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install mlton
          curl -LO https://github.com/toml-lang/toml-test/releases/download/v1.4.0/toml-test-v1.4.0-linux-amd64.gz
          gzip -d toml-test-v1.4.0-linux-amd64.gz
          mv toml-test-v1.4.0-linux-amd64 toml-test
          chmod +x toml-test
          curl -Lo smlfmt.tar.gz https://github.com/shwestrick/smlfmt/archive/refs/tags/v1.1.0.tar.gz
          tar xf smlfmt.tar.gz
          make -C smlfmt-1.1.0
      - name: Type check
        run: make typecheck
      - name: smlfmt
        run: smlfmt-1.1.0/smlfmt --check toml.mlb test/decoder.mlb
      - name: Test
        run: |
          make -C test decoder utf8
          ./toml-test test/decoder
          test/utf8
  smlnj:
    name: Build and test with SML/NJ
    runs-on: macos-latest
    # runs-on: ubuntu-latest  # smlnj is a bit old
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies (macOS)
        run: |
          brew update && brew install smlnj toml-test
          echo "/usr/local/smlnj/bin" >> $GITHUB_PATH
      # - name: Install dependencies (Ubuntu)
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install smlnj
      #     curl -LO https://github.com/toml-lang/toml-test/releases/download/v1.4.0/toml-test-v1.4.0-linux-amd64.gz
      #     gzip -d toml-test-v1.4.0-linux-amd64.gz
      #     mv toml-test-v1.4.0-linux-amd64 toml-test
      #     chmod +x toml-test
      - name: Type check
        run: |
          echo 'OS.Process.exit (if CM.make "toml.cm" then OS.Process.success else OS.Process.failure) : unit;' | sml
      - name: Test
        working-directory: test
        run: |
          ml-build decoder.cm Main.main decoder-smlnj
          toml-test -- sml @SMLload=decoder-smlnj
          echo 'use "utf8.sml";' | sml
  smlsharp:
    name: Build and test with SML#
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo add-apt-repository ppa:smlsharp/ppa
          sudo apt-get update
          sudo apt-get install smlsharp 
          curl -LO https://github.com/toml-lang/toml-test/releases/download/v1.4.0/toml-test-v1.4.0-linux-amd64.gz
          gzip -d toml-test-v1.4.0-linux-amd64.gz
          mv toml-test-v1.4.0-linux-amd64 toml-test
          chmod +x toml-test
      - name: Compile
        run: make -f Makefile.smlsharp
      - name: Test
        working-directory: test
        run: |
          make -f Makefile.smlsharp
          ../toml-test ./decoder
          ./utf8
  mlkit:
    name: Build and test with MLKit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          curl -LO https://github.com/melsman/mlkit/releases/download/v4.7.8/mlkit-bin-dist-linux.tgz
          tar xf mlkit-bin-dist-linux.tgz
          sudo make -C mlkit-bin-dist-linux install
          curl -LO https://github.com/toml-lang/toml-test/releases/download/v1.4.0/toml-test-v1.4.0-linux-amd64.gz
          gzip -d toml-test-v1.4.0-linux-amd64.gz
          mv toml-test-v1.4.0-linux-amd64 toml-test
          chmod +x toml-test
      - name: Compile
        run: make -f Makefile.mlkit
        env:
          SML_LIB: /usr/local/lib/mlkit
      - name: Test
        working-directory: test
        run: |
          make -f Makefile.mlkit decoder utf8
          ../toml-test ./decoder
          ./utf8
        env:
          SML_LIB: /usr/local/lib/mlkit
  lunarml:
    name: Build and test with LunarML
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          docker pull ghcr.io/minoki/lunarml:latest
          curl -LO https://github.com/toml-lang/toml-test/releases/download/v1.4.0/toml-test-v1.4.0-linux-amd64.gz
          gzip -d toml-test-v1.4.0-linux-amd64.gz
          mv toml-test-v1.4.0-linux-amd64 toml-test
          chmod +x toml-test
      - name: Check type annotations
        run: docker run --rm --platform linux/amd64 -v "$(pwd)":/work -w /work ghcr.io/minoki/lunarml:latest lunarml compile --default-ann "valDescInComments error" toml.mlb
      - name: Test
        run: |
          docker run --rm --platform linux/amd64 -v "$(pwd)":/work -w /work ghcr.io/minoki/lunarml:latest lunarml compile --nodejs-cps --default-ann "valDescInComments error" test/decoder.mlb
          docker run --rm --platform linux/amd64 -v "$(pwd)":/work -w /work ghcr.io/minoki/lunarml:latest lunarml compile --nodejs-cps --default-ann "valDescInComments error" test/utf8.mlb
          ./toml-test -- node test/decoder.mjs
          node test/utf8.mjs
